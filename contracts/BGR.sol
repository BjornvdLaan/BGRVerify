pragma solidity 0.4.21;
pragma experimental ABIEncoderV2;

contract BGR1 {

   string[] messages = [
   "MESSAGE 0",
"MESSAGE 0",
"MESSAGE 0",
"MESSAGE 0",
"MESSAGE 0",
   ];

    string[] labels = [
    "example.com/api/0",
    "example.com/api/1",
    "example.com/api/2",
    "example.com/api/3",
    "example.com/api/4",
    "example.com/api/5",
    "example.com/api/6",
    "example.com/api/7",
    "example.com/api/8",
    "example.com/api/9"
    ];

    //Simulation of PKI (assumed to be available)
    //uint n_signers = 1;
    uint256 constant e = 65537;
    bytes modulus0 = hex
    bytes modulus1 = hex"6138393135623730363730303535306634346238343332646138306638313263356361356432346265316634633135376432666263353666393764633731383164353231316532663533633935613534303161613066663839383262656466373532336436396530653430653733383864323264633365373136326264653232363862306336396162333066373931643135316139396439646532383231333533316134623136646438366566633035303638616461326635333432306137376366313838303661303139666236366166376138626536383336316432363064623732333239636139303337636437353636656265396132343737653064316565666162396131306239646266363134323963366137306130323431663430376634333062623839343933303262343666393163383635313937363730306137326636326530633238643737313364313937383664306237616134386438326632393431633032633634356433386563383336633933623461313931313564646538626333306635343335393762353330333761393964616138373937346362303730353338383365663138656236666661636638353761336430323534316666646563306534323735313961303934336436303034376434643036663733663465353630373665353631653166616233353864323838363736326439336637";
    bytes modulus2 = hex
    bytes modulus3 = hex"6339303234333463383432653239663561346136306163346534303061313039303734383737303339376633643561313665346337316261373939303738643233393934393561303263626635366238316339306461316165616133366563306363373562383934343661396335313638326562353039616631323038356533633637646232366265373439636537613231616630316265376466306363323737613731643035383935303865303632663032313731316464353731326330663031363736316161613165316334313233303831326136336632353465326466633334356138323962656665346136633638663936656563636334653231396337613734636361643332646566653838353166303963366337643561346563326439623833306432356430663938313863306433663665613035666134613937656463326233353865376537643835396538353637373736316334363366363562663065666436373239643339303162663036303134393835633934316464653439373961326338373031396232663733356366343132353161373064373533633237363430346636653830316237643839386563656136356230316531613761313361393130616533303333616432333836393332346663643031336136323530306362666234376537323165333133313832336564383165303161343037";
    bytes modulus4 = hex"6163336166666162653731353364363738376130366162356330613331646263653966363939363433623163626434643864346237316330656236346563333633653638336166343866343765383432356332313962383039313935646431633763643633396539303963306233353836313730376631393634613862363466306161373062383763383037313535383332393439323062316233396335653561343764336139323634663032376239316434623166326464383932616634653362646663333762613530643562393337323133356438306666363137363065663639373034653335393664376463333466616634636539346538303731323830323863626165616432396463383931656338343838643066366430383333316638613230376439653233363464373537366161303438373661616466323335653264633334656266636666373830393730363664653362393935343033373738373133356263383837633531373761393462636663613562373430376164373437313663303939333762333635336165373938303635646136303165363638343537353532666132343165333930666537353962633533623932373566316434393162363461373365383762353830316334323230623033326465643063346638323939366538643434626166346234356563663566323635633264323166";
    bytes modulus5 = hex
    bytes modulus6 = hex
    bytes modulus7 = hex
    bytes modulus8 = hex
    bytes modulus9 = hex

    function verify(bytes m, bytes x, bytes32 h, bool[] b, bytes16[] r) returns (bool) {
        bytes memory x_prev = x;
        bytes32 h_prev = h;

        bytes memory g;
        bytes memory y;
        bytes memory X;
        bytes32 eta;

        uint n_signers = r.length;

        for (uint i = n_signers - 1; i > 0; i--) {
            //Line 2
            X = split_inverse(x_prev, b[i]);
            y = modexp(X, e, getModulus(i));

            //Line 3
            g = ghash(h_prev);

            //Line 4
            x_prev = xorbytes(g, y);

            //Line 5
            eta = hhash(getModulus(i), messages[i], labels[i], r[i], x_prev);

            //Line 6
            h_prev = h_prev ^ eta;
        }

        //Line 7
        bytes32 h_hash = hhashbase(modulus0, messages[0], labels[0], r[0]);
        bytes memory g_hash = ghash(h_prev);

        bytes memory pig = modexp(split_inverse(x_prev, b[0]), e, modulus0);

        return h_hash == h_prev && equals(g_hash, pig);
    }

    function getModulus(uint i) view internal returns (bytes) {
        if (i == 0) {
            return modulus0;
        }
    }

    function modexp(bytes base, uint exponent, bytes modulus) internal returns (bytes output) {
        uint base_length = base.length;
        uint modulus_length = modulus.length;

        uint size = (32 * 3) + base_length + 32 + modulus_length;
        bytes memory input = new bytes(size);
        output = new bytes(modulus_length);

        assembly {
            mstore(add(input, 32), base_length)
            mstore(add(input, 64), 32)
            mstore(add(input, 96), modulus_length)

            mstore(add(input, add(128, base_length)), exponent)
        }

        memcopy(base, 0, input, 96, base_length);
        memcopy(modulus, 0, input, 96 + base_length + 32, modulus_length);

        assembly {
            pop(call(gas(), 5, 0, add(input, 32), size, add(output, 32), modulus_length))
        }
    }

    function split_inverse(bytes xi, bool bi) internal pure returns (bytes) {
        if (bi) {
            xi[0] = byte(uint(xi[0]) + 128);
        }

        return xi;
    }

    function ghash(bytes32 y) internal pure returns (bytes) {
        bytes32 hash = keccak256(y);
        bytes memory res = hex"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

        for(uint i = 32; i < 256; i++) {
            res[i] = hash[i % 32];
        }

        return res;
    }

    function hhash(bytes modulus, string message, string label, bytes16 random, bytes x_prev) internal pure returns (bytes32) {
        return keccak256(modulus, message, label, random, x_prev);
    }

    function hhashbase(bytes modulus, string message, string label, bytes16 random) internal pure returns (bytes32) {
        return keccak256(modulus, message, label, random);
    }

    function cut(bytes i) internal pure returns (bytes32 part1, bytes32 part2, bytes32 part3, bytes32 part4, bytes32 part5, bytes32 part6, bytes32 part7, bytes32 part8) {

        assembly {
            part1 := mload(add(i, 32))
            part2 := mload(add(i, 64))
            part3 := mload(add(i, 96))
            part4 := mload(add(i, 128))
            part5 := mload(add(i, 160))
            part6 := mload(add(i, 192))
            part7 := mload(add(i, 224))
            part8 := mload(add(i, 256))
        }
    }

    function xorbytes(bytes a, bytes y) internal pure returns (bytes) {
        bytes32 c1;
        bytes32 c2;
        bytes32 c3;
        bytes32 c4;
        bytes32 c5;
        bytes32 c6;
        bytes32 c7;
        bytes32 c8;

        assembly {
            c1 := xor(mload(add(a, 32)), mload(add(y, 32)))
            c2 := xor(mload(add(a, 64)), mload(add(y, 64)))
            c3 := xor(mload(add(a, 96)), mload(add(y, 96)))
            c4 := xor(mload(add(a, 128)), mload(add(y, 128)))
            c5 := xor(mload(add(a, 160)), mload(add(y, 160)))
            c6 := xor(mload(add(a, 192)), mload(add(y, 192)))
            c7 := xor(mload(add(a, 224)), mload(add(y, 224)))
            c8 := xor(mload(add(a, 256)), mload(add(y, 256)))
        }

        bytes memory merged = new bytes(256);

        uint k = 0;

        for (uint i = 0; i < 32; i++) {
            merged[k] = c1[i];
            k++;
        }

        for (i = 0; i < 32; i++) {
            merged[k] = c2[i];
            k++;
        }

        for (i = 0; i < 32; i++) {
            merged[k] = c3[i];
            k++;
        }

        for (i = 0; i < 32; i++) {
            merged[k] = c4[i];
            k++;
        }

        for (i = 0; i < 32; i++) {
            merged[k] = c5[i];
            k++;
        }

        for (i = 0; i < 32; i++) {
            merged[k] = c6[i];
            k++;
        }

        for (i = 0; i < 32; i++) {
            merged[k] = c7[i];
            k++;
        }

        for (i = 0; i < 32; i++) {
            merged[k] = c8[i];
            k++;
        }

        return merged;
    }

    function memcopy(bytes src, uint srcoffset, bytes dst, uint dstoffset, uint len) pure internal {
        assembly {
            src := add(src, add(32, srcoffset))
            dst := add(dst, add(32, dstoffset))

        // copy 32 bytes at once
            for
            {}
            iszero(lt(len, 32))
            {
                dst := add(dst, 32)
                src := add(src, 32)
                len := sub(len, 32)
            }
            {mstore(dst, mload(src))}

        // copy the remainder (0 < len < 32)
            let mask := sub(exp(256, sub(32, len)), 1)
            let srcpart := and(mload(src), not(mask))
            let dstpart := and(mload(dst), mask)
            mstore(dst, or(srcpart, dstpart))
        }
    }

    function equals(bytes memory self, bytes memory other) internal pure returns (bool equal) {
        if (self.length != other.length) {
            return false;
        }

        uint addr;
        uint addr2;
        uint len = self.length;

        assembly {
            addr := add(self, /*BYTES_HEADER_SIZE*/32)
            addr2 := add(other, /*BYTES_HEADER_SIZE*/32)
            equal := eq(keccak256(addr, len), keccak256(addr2, len))
        }
    }

}
